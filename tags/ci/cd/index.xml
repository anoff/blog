<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Andreas' Blog</title><link>//blog.anoff.io/tags/ci/cd/</link><description>Recent content in CI/CD on Andreas' Blog</description><generator>Hugo -- gohugo.io</generator><atom:link href="//blog.anoff.io/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Building autoscaling CI infrastructure with Azure Kubernetes</title><link>//blog.anoff.io/2019-10-autoscaling-ci-agent-with-azure-kubernetes/</link><pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2019-10-autoscaling-ci-agent-with-azure-kubernetes/</guid><description>Ever wanted to create a build agent factory where you do not have to care about how many build agents you need at a given point? With this post I want to share my experience setting up a dedicated CI runner infrastructure with the Azure + Pipelines ecosystem. The main features of the solution are automated scaling, ephemeral build agents, docker based environments, minimal operation responsible and strong pay-per-use billing concepts.</description></item><item><title>Migrating to Azure Pipelines</title><link>//blog.anoff.io/2019-08-24-drone-ci-travis-ci-to-azure-pipelines/</link><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2019-08-24-drone-ci-travis-ci-to-azure-pipelines/</guid><description>Beginning of the year I switched my blogs build chain from Travis CI to drone CI. Due to some tasks with Azure DevOps at work I wanted to test how good it fits my private projects. In this post I will NOT tell you how to set up your pipelines project because Microsoft has great docs for that. Instead this post will cover how to best put your build workflow into a pipeline specification.</description></item><item><title>Continuous Vitae - Auto built and git versioned CV</title><link>//blog.anoff.io/2019-04-08-cv-continuous-vitae/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2019-04-08-cv-continuous-vitae/</guid><description>Versioning your CV is important. One traditional approach is to date it whenever you send it out. I chose to present my CV on my website and host it on GitHub. In this blog post I want to explain how I set up continuous integration pipeline for building my CV that automatically injects a unique version into each build. This method is applicable for anyone choosing to ascii-based CV - in my case LaTeX.</description></item><item><title>Hosting Gitea and Drone with Docker</title><link>//blog.anoff.io/2019-03-24-self-hosted-gitea-drone/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2019-03-24-self-hosted-gitea-drone/</guid><description>&lt;p>This post will walk you through setting up a self hosted git based continuous integration environment on a two machine setup - assuming you already have two virtual machines at your disposal.
Using &lt;a href="https://gitea.io/">&lt;strong>Gitea&lt;/strong>&lt;/a> for git hosting and contribution management and &lt;a href="https://drone.io/">&lt;strong>Drone&lt;/strong>&lt;/a> for docker-based build jobs, this will guide you through creating &lt;strong>docker-compose&lt;/strong> files as well as configuring the individual services and getting &lt;strong>SSL certificates&lt;/strong> via &lt;a href="https://traefik.io/">&lt;strong>traefik&lt;/strong>&lt;/a>.
Docker and docker-compose knowledge is required for this tutorial. It mostly focuses on the correct configuration of all the services at play here and not explaining their basic functionality.&lt;/p>
&lt;p>This tutorial uses Azure resources so some of the aspects might not be 100% applicable if you chose another infrastructure provider.&lt;/p>
&lt;p></description></item><item><title>GitLab CI/CD for GitHub</title><link>//blog.anoff.io/2018-03-30-gitlab-ci-for-github/</link><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2018-03-30-gitlab-ci-for-github/</guid><description>&lt;p>When creating a git project that you want to share with others you traditionally had the choice between GitHub with its huge community and tons of integrations, GitLab with a great overall dev experience from issues to one of the best CI/CD solutions out there and BitBucket being one of the friends you have since kindergarten. My personal decision was to host all my personal projects on &lt;a href="https://github.com/anoff">🦑 GitHub&lt;/a>. For projects that need CI/CD I tinkered around with &lt;a href="https://travis-ci.org/">👷‍ Travis CI&lt;/a> and &lt;a href="https://circleci.com/">🅾️ Circle CI&lt;/a> on top of GitHub.&lt;/p></description></item></channel></rss>