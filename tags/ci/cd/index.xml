<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ci/Cd on Andreas&#39; Blog</title><link>https://blog.anoff.io/tags/ci/cd/</link><description>Recent content in Ci/Cd on Andreas&#39; Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 08 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.anoff.io/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Continuous Vitae - Auto built and git versioned CV</title><link>https://blog.anoff.io/2020-04-08-cv-continuous-vitae/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.anoff.io/2020-04-08-cv-continuous-vitae/</guid><description>Versioning your CV is important. One traditional approach is to date it whenever you send it out. I chose to present my CV on my website and host it on GitHub. In this blog post I want to explain how I set up continuous integration pipeline for building my CV that automatically injects a unique version into each build. This method is applicable for anyone choosing to ascii-based CV - in my case LaTeX.</description></item><item><title>Hosting Gitea and Drone with Docker</title><link>https://blog.anoff.io/2019-03-24-self-hosted-gitea-drone/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.anoff.io/2019-03-24-self-hosted-gitea-drone/</guid><description>&lt;p&gt;This post will walk you through setting up a self hosted git based continuous integration environment on a two machine setup - assuming you already have two virtual machines at your disposal.
Using &lt;a href=&#34;https://gitea.io/&#34;&gt;&lt;strong&gt;Gitea&lt;/strong&gt;&lt;/a&gt; for git hosting and contribution management and &lt;a href=&#34;https://drone.io/&#34;&gt;&lt;strong&gt;Drone&lt;/strong&gt;&lt;/a&gt; for docker-based build jobs, this will guide you through creating &lt;strong&gt;docker-compose&lt;/strong&gt; files as well as configuring the individual services and getting &lt;strong&gt;SSL certificates&lt;/strong&gt; via &lt;a href=&#34;https://traefik.io/&#34;&gt;&lt;strong&gt;traefik&lt;/strong&gt;&lt;/a&gt;.
Docker and docker-compose knowledge is required for this tutorial. It mostly focuses on the correct configuration of all the services at play here and not explaining their basic functionality.&lt;/p&gt;
&lt;p&gt;This tutorial uses Azure resources so some of the aspects might not be 100% applicable if you chose another infrastructure provider.&lt;/p&gt;
&lt;p&gt;</description></item><item><title>GitLab CI/CD for GitHub</title><link>https://blog.anoff.io/2018-03-30-gitlab-ci-for-github/</link><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.anoff.io/2018-03-30-gitlab-ci-for-github/</guid><description>&lt;p&gt;When creating a git project that you want to share with others you traditionally had the choice between GitHub with its huge community and tons of integrations, GitLab with a great overall dev experience from issues to one of the best CI/CD solutions out there and BitBucket being one of the friends you have since kindergarten. My personal decision was to host all my personal projects on &lt;a href=&#34;https://github.com/anoff&#34;&gt;ü¶ë GitHub&lt;/a&gt;. For projects that need CI/CD I tinkered around with &lt;a href=&#34;https://travis-ci.org/&#34;&gt;üë∑‚Äç Travis CI&lt;/a&gt; and &lt;a href=&#34;https://circleci.com/&#34;&gt;üÖæÔ∏è Circle CI&lt;/a&gt; on top of GitHub.&lt;/p&gt;</description></item></channel></rss>