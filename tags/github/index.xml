<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>github on Andreas' Blog</title><link>//blog.anoff.io/tags/github/</link><description>Recent content in github on Andreas' Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 26 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="//blog.anoff.io/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Publishing private npm packages to GitHub Package registry for free</title><link>//blog.anoff.io/2020-07-private-npm-package-github/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2020-07-private-npm-package-github/</guid><description>&lt;p>Even though I am a big fan of Open Source Software and try to make my projects open and consumable by others as well, there are cases where you want to keep your stuff private.
But even if you work in a closed source environment you still want to use the same tools that you employ in the open source world.
In this blog post I will explain how you can create private npm packages for your Javascript/Typescript projects - and I will show you how you can host your private npm packages &lt;strong>for free&lt;/strong>!&lt;/p></description></item><item><title>Reference GitHub #issues during git rebase</title><link>//blog.anoff.io/2019-07-20-git-config-rebase-github-issue/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2019-07-20-git-config-rebase-github-issue/</guid><description>&lt;p>Being a developer most times means working with git.
There are many different ways to use git and every project, every developer has their preferences.
For my own projects I work a lot with GitHub and I love using the &lt;code>git rebase -i&lt;/code> feature to clean up commits.&lt;/p>
&lt;p></description></item><item><title>Markdown native diagrams with PlantUML</title><link>//blog.anoff.io/2018-07-31-diagrams-with-plantuml/</link><pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2018-07-31-diagrams-with-plantuml/</guid><description>This post covers PlantUML basics and how it can be used in GitLab or GitHub projects as well as a seamless local development environment using Visual Studio Code. I have been wanting to write this post for months. Lately I have been using PlantUML extensively at work but also in my private projects. You can see it being used in my plantbuddy and techradar projects on GitHub. Using it in different places and for various purposes I came across a bunch of issues that I want to share in this post.</description></item><item><title>GitLab CI/CD for GitHub</title><link>//blog.anoff.io/2018-03-30-gitlab-ci-for-github/</link><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><guid>//blog.anoff.io/2018-03-30-gitlab-ci-for-github/</guid><description>&lt;p>When creating a git project that you want to share with others you traditionally had the choice between GitHub with its huge community and tons of integrations, GitLab with a great overall dev experience from issues to one of the best CI/CD solutions out there and BitBucket being one of the friends you have since kindergarten. My personal decision was to host all my personal projects on &lt;a href="https://github.com/anoff">🦑 GitHub&lt;/a>. For projects that need CI/CD I tinkered around with &lt;a href="https://travis-ci.org/">👷‍ Travis CI&lt;/a> and &lt;a href="https://circleci.com/">🅾️ Circle CI&lt;/a> on top of GitHub.&lt;/p></description></item></channel></rss>